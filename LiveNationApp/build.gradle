import java.util.regex.Pattern

buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'android'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

android {
    compileSdkVersion 19
    buildToolsVersion "19.0.1"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 18
    }

    signingConfigs {

        def mLNStorePassword
        def mLNKeyAlias
        def mLNKeyPassword

        if (!project.hasProperty('LNStorePassword')) {
            mLNStorePassword = "default"
        } else {
            mLNStorePassword = LNStorePassword
        }

        if (!project.hasProperty('LNKeyAlias')) {
            mLNKeyAlias = "default"
        } else {
            mLNKeyAlias = LNKeyAlias
        }
        if (!project.hasProperty('LNKeyPassword')) {
            mLNKeyPassword = "default"
        } else {
            mLNKeyPassword = LNKeyPassword
        }


        debug {
            storeFile file('../docs/keystore/debug.keystore')
        }

        release {
            storeFile file(LNReleaseStoreFile)
            storePassword mLNStorePassword
            keyAlias mLNKeyAlias
            keyPassword mLNKeyPassword
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
    }
    sourceSets {
        androidTest.setRoot('src/test')
    }

    buildTypes {
        release {
            runProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }

        debug {
            packageNameSuffix ".debug"
            versionNameSuffix " debug"
            signingConfig signingConfigs.debug
        }
    }
}

task('bumpVersion') << {
    def versionMajor = 2
    def versionMinor = 0

    def manifestFile = file("src/main/AndroidManifest.xml")
    def pattern = Pattern.compile("versionCode=\"(\\d+)\"")
    def manifestText = manifestFile.getText()
    def matcher = pattern.matcher(manifestText)
    matcher.find()

    def versionCode = Integer.parseInt(matcher.group(1))
    versionCode++
    manifestText = matcher.replaceAll("versionCode=\"" + versionCode + "\"")

    def versionName = versionMajor + "." + versionMinor + "." + versionCode
    pattern = Pattern.compile("versionName=\"[\\d\\.]+\"")
    matcher = pattern.matcher(manifestText)
    matcher.find()
    manifestText = matcher.replaceAll("versionName=\"" + versionName + "\"")

    manifestFile.write(manifestText)
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile project(':LabsPlatform')
    compile project(':facebookSDK')
    compile project(':Ticketing')
    compile 'com.android.support:appcompat-v7:+'
    compile 'com.google.android.gms:play-services:+'
    compile('se.emilsjolander:stickylistheaders:2.1.5').ext.git = 'https://github.com/emilsjolander/StickyListHeaders.git'
    compile 'com.crashlytics.android:crashlytics:1.+'

}
