buildscript {
    repositories {
        maven { url 'http://download.crashlytics.com/maven' }
    }

    dependencies {
        classpath 'com.crashlytics.tools.gradle:crashlytics-gradle:1.+'
    }
}

apply plugin: 'com.android.application'
apply plugin: 'crashlytics'

repositories {
    maven { url 'http://download.crashlytics.com/maven' }
}

def computeVersionCode() {
    return 96
}

def computeVersionName(def versionCode) {
    return "2.0." + versionCode
}

def computeGitSha(File rootDir) {
    ProcessBuilder processBuilder = new ProcessBuilder("git", "rev-parse", "--short", "HEAD")
    processBuilder.directory(rootDir)
    return processBuilder.start().in.text.trim()
}

android {
    compileSdkVersion 21
    buildToolsVersion '21.1.1'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    lintOptions {
        // if true, generate an XML report for use by for example Jenkins
        xmlReport true
        //file to write report to (if not specified, defaults to lint-results.xml)
        xmlOutput file("lint-report.xml")
        // if true, generate an HTML report (with issue explanations, sourcecode, etc)
        htmlReport true
        // optional path to report (default will be lint-results.html in the builddir)
        htmlOutput file("lint-report.html")

        abortOnError true
    }

    defaultConfig {
        versionCode computeVersionCode()
        versionName computeVersionName(versionCode)
        minSdkVersion 14
        targetSdkVersion 21


        testApplicationId "com.livenation.mobile.android.na.test"
        testInstrumentationRunner "com.google.android.apps.common.testing.testrunner.GoogleInstrumentationTestRunner"

        for (Project project : rootProject.subprojects) {
            String name = project.name.toUpperCase().replaceAll("[^A-Z_]", "")
            String gitSha = computeGitSha(project.projectDir)
            buildConfigField "String", "GIT_SHA_$name", "\"$gitSha\""
        }
    }

    signingConfigs {

        def mLNStorePassword
        def mLNKeyAlias
        def mLNKeyPassword

        if (!project.hasProperty('LNStorePassword')) {
            mLNStorePassword = "default"
        } else {
            mLNStorePassword = LNStorePassword
        }

        if (!project.hasProperty('LNKeyAlias')) {
            mLNKeyAlias = "default"
        } else {
            mLNKeyAlias = LNKeyAlias
        }
        if (!project.hasProperty('LNKeyPassword')) {
            mLNKeyPassword = "default"
        } else {
            mLNKeyPassword = LNKeyPassword
        }


        debug {
            storeFile file('../docs/keystore/debug.keystore')
        }

        release {
            storeFile file(LNReleaseStoreFile)
            storePassword mLNStorePassword
            keyAlias mLNKeyAlias
            keyPassword mLNKeyPassword
        }
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE.txt'
        exclude "LICENSE.txt"
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
            signingConfig signingConfigs.release
        }

        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix " debug"
            signingConfig signingConfigs.debug
            testCoverageEnabled true
        }

        labrats {
            applicationIdSuffix ".labrats"
            versionNameSuffix " labrats"
            signingConfig signingConfigs.debug
        }
    }
}

//Runs checks that requires a connected device or emulator. they will run on all connected devices in parallel.
task test() {
    println ':Ticketing:connectedCheck running'
    println ':LabsPlatform:connectedCheck running'
    println ':LiveNationApp:connectedCheck'
}
test.dependsOn(':Ticketing:connectedCheck')
test.dependsOn(':LabsPlatform:connectedCheck')
test.dependsOn(':LiveNationApp:connectedCheck')

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    compile project(':LabsPlatform')
    compile project(':Ticketing')
    compile project(':urbanairship-lib-5.1.4')
    compile 'com.facebook.android:facebook-android-sdk:3.21.1'
    compile 'com.android.support:support-v13:21.0.3'
    compile 'com.google.android.gms:play-services-base:6.5.87'
    compile 'com.google.android.gms:play-services-maps:6.5.87'
    compile 'com.google.android.gms:play-services-appindexing:6.5.87'
    compile 'com.google.android.gms:play-services-location:6.5.87'
    compile 'com.google.android.gms:play-services-plus:6.5.87'
    compile('se.emilsjolander:stickylistheaders:2.5.2').ext.git = 'https://github.com/emilsjolander/StickyListHeaders.git'
    compile 'com.android.support:support-v4:21.+'
    compile 'com.crashlytics.android:crashlytics:1.1.11'
    compile 'io.reactivex:rxandroid:0.22.0'
    compile 'com.squareup.retrofit:retrofit:1.7.1'
    compile 'com.squareup.retrofit:converter-jackson:1.2.1'
    compile 'com.amplitude:android-sdk:1.4.3'
    compile 'com.mcxiaoke.volley:library:1.0.10'

    androidTestCompile 'com.jakewharton.espresso:espresso:1.1-r3'
}
